#!/usr/bin/env bash
# Update privileges of the user dst_reader
psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
    GRANT USAGE ON SCHEMA l1, l2, l3 TO $POSTGRES_DB_READER;
    ALTER DEFAULT PRIVILEGES FOR ROLE $POSTGRES_USER IN SCHEMA l1, l2, l3 GRANT SELECT ON TABLES TO $POSTGRES_DB_READER;
    GRANT SELECT ON ALL TABLES IN SCHEMA l1, l2, l3 TO $POSTGRES_DB_READER;
EOSQL

# Create role and User for the PostgREST API
# Create anonimous role to grant read acces to the specified schema and tables of the DB, for the web requests.
# Create an user in order to login to the RESTAPI
psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
    GRANT USAGE ON SCHEMA $PGRST_DB_SCHEMA TO $PGRST_DB_ANON_ROLE;
    GRANT SELECT ON ALL TABLES IN SCHEMA $PGRST_DB_SCHEMA TO $PGRST_DB_ANON_ROLE;
    ALTER DEFAULT PRIVILEGES FOR ROLE $POSTGRES_USER IN SCHEMA $PGRST_DB_SCHEMA GRANT SELECT ON TABLES TO $PGRST_DB_ANON_ROLE;
    GRANT $PGRST_DB_ANON_ROLE TO $PGRST_DB_USER;
EOSQL

# Create Role and User for Replication
psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
    GRANT USAGE ON SCHEMA l1, l2, l3 TO $REPLICATION_DB_ROLE;
    GRANT SELECT ON ALL TABLES IN SCHEMA l1, l2, l3 TO $REPLICATION_DB_ROLE;
    ALTER DEFAULT PRIVILEGES FOR ROLE $POSTGRES_USER IN SCHEMA l1, l2, l3 GRANT SELECT ON TABLES TO $REPLICATION_DB_ROLE;
    GRANT $REPLICATION_DB_ROLE TO $REPLICATION_DB_USER;
EOSQL
