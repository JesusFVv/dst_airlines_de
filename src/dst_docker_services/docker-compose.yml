services:
  postgres_db:
    image: postgres:16.3-bullseye
    container_name: $POSTGRES_CONTAINER_NAME
    restart: always
    shm_size: 128mb
    networks:
      - ${PROJECT_NETWORK_1}
    environment:
      POSTGRES_USER_FILE: /run/secrets/db_user
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
      POSTGRES_DB: $POSTGRES_DB
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    volumes:
      - db-data:/var/lib/postgresql/data
      - ${POSTGRES_INIT_FILE_1}:/docker-entrypoint-initdb.d/1.sh
      - ${POSTGRES_INIT_FILE_2}:/docker-entrypoint-initdb.d/2.sql
    secrets:
      - db_password
      - db_user
    # ports:
    #   - "6432:5432"  # To use with DBeaver desktop in host only
  dbeaver:
    image: dbeaver/cloudbeaver:latest
    container_name: $DBEAVER_CONTAINER_NAME
    networks:
      - ${PROJECT_NETWORK_1}
    environment:
      CLOUDBEAVER_ROOT_URI: /cloudbeaver
    restart: always
    # ports:
    #   - 8978:8978
    volumes:
      - cloudbeaver_workspace:/opt/cloudbeaver/workspace
  metabase:
    image: metabase/metabase
    container_name: $META_CONTAINER_NAME
    networks:
      - ${PROJECT_NETWORK_1}
    environment:
      MB_DB_FILE: "/metabase-data/metabase.db"
      MUID: $SERVICES_UID
      MGID: $SERVICES_GID
      JAVA_TIMEZONE: Europe/Paris
      JAVA_OPTS: -Xmx3g
      MB_JETTY_HOST: 0.0.0.0
      MB_JETTY_PORT: 3000
    restart: unless-stopped
    volumes:
      - metabase-data:/metabase-data
  postgrest:
    image: postgrest/postgrest:v12.2.3
    container_name: $PGRST_CONTAINER_NAME
    networks:
      - ${PROJECT_NETWORK_1}
    environment:
      PGRST_DB_URI: $PGRST_DB_URI
      PGRST_DB_SCHEMAS: $PGRST_DB_SCHEMA
      PGRST_DB_ANON_ROLE: $PGRST_DB_ANON_ROLE
      PGRST_DB_AGGREGATES_ENABLED: $PGRST_DB_AGGREGATES_ENABLED
    restart: unless-stopped
  nginx:
    image: nginx
    container_name: $NGINX_CONTAINER_NAME
    networks:
      - ${PROJECT_NETWORK_1}
    ports:
      - 8000:80
      - 8085:443
      - 5433:5433
    volumes:
      - ${PROJECT_ABSOLUT_PATH}/var/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ${PROJECT_ABSOLUT_PATH}/var/nginx/conf.d:/etc/nginx/conf.d:ro
      - ${PROJECT_ABSOLUT_PATH}/var/nginx/stream.conf.d:/etc/nginx/stream.conf.d:ro
      - ${PROJECT_ABSOLUT_PATH}/etc/ssl/certs/dst_vm.crt:/etc/nginx/ssl/dst_vm.crt:ro
      - ${PROJECT_ABSOLUT_PATH}/etc/ssl/certs/dst_vm.key:/etc/nginx/ssl/dst_vm.key:ro
    restart: unless-stopped
    deploy:
      restart_policy:
        condition: any
        delay: 10s
  rabbitmq:
    image: rabbitmq:3
    container_name: $RABBITMQ_CONTAINER_NAME
    hostname: my-rabbit
    networks:
      - ${PROJECT_NETWORK_1}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    restart: unless-stopped
  flight_schedules_producer:
    image: dst_flight_schedules_producer:latest
    container_name: flight_schedules_producer
    environment:
      - AIRPORTS_FILE_PATH=/usr/src/app/data/airports.csv
      - RABBITMQ_HOST=$RABBITMQ_CONTAINER_NAME
      - RABBITMQ_PORT=$RABBITMQ_PORT
      - FLIGHT_SCHEDULES_CHANNEL=$FLIGHT_SCHEDULES_CHANNEL
      - LOG_FILE_PATH=/usr/src/app/log
    networks:
      - ${PROJECT_NETWORK_1}
    volumes:
      - ${AIRPORTS_FILE_DIR}:/usr/src/app/data:ro
      - ${FLIGHT_SCHEDULES_PRODUCER_LOG_PATH}:/usr/src/app/log:rw
    restart: no
    depends_on:
      rabbitmq:
        condition: service_started
        restart: false
  flight_schedules_consumer:
    image: dst_flight_schedules_consumer:latest
    environment:
      - RABBITMQ_HOST=$RABBITMQ_CONTAINER_NAME
      - RABBITMQ_PORT=$RABBITMQ_PORT
      - FLIGHT_SCHEDULES_CHANNEL=$FLIGHT_SCHEDULES_CHANNEL
      - LOG_FILE_PATH=/usr/src/app/log
    networks:
      - ${PROJECT_NETWORK_1}
    volumes:
      - ${FLIGHT_SCHEDULES_CONSUMER_DOCKER_PATH}/.dlt/secrets.toml:/usr/src/app/.dlt/secrets.toml:ro
      - ${FLIGHT_SCHEDULES_CONSUMER_LOG_PATH}:/usr/src/app/log:rw
    restart: always
    depends_on:
      rabbitmq:
        condition: service_started
      postgres_db:
        condition: service_started
    deploy:
      mode: replicated
      replicas: 2
  customer_flight_info_producer:
    image: dst_customer_flight_info_producer:latest
    container_name: customer_flight_info_producer
    environment:
      - AIRPORTS_FILE_PATH=/usr/src/app/data/airports.csv
      - RABBITMQ_HOST=$RABBITMQ_CONTAINER_NAME
      - RABBITMQ_PORT=$RABBITMQ_PORT
      - CUSTOMERS_FLIGHT_INFO_ARRIVALS_CHANNEL=$CUSTOMERS_FLIGHT_INFO_ARRIVALS_CHANNEL
      - CUSTOMERS_FLIGHT_INFO_DEPARTURES_CHANNEL=$CUSTOMERS_FLIGHT_INFO_DEPARTURES_CHANNEL
      - LOG_FILE_PATH=/usr/src/app/log
    networks:
      - ${PROJECT_NETWORK_1}
    volumes:
      - ${AIRPORTS_FILE_DIR}:/usr/src/app/data:ro
      - ${CUSTOMER_FLIGHT_INFO_PRODUCER_LOG_PATH}:/usr/src/app/log:rw
    restart: no
    depends_on:
      rabbitmq:
        condition: service_started
        restart: false
volumes:
  db-data:
    name: db-data
  cloudbeaver_workspace:
    name: cloudbeaver_workspace
  metabase-data:
    name: metabase-data
  rabbitmq-data:
    name: rabbitmq-data
secrets:
  db_password:
    file: $POSTGRES_DBUSER_PASSWORD_FILE
  db_user:
    file: $POSTGRES_DBUSER_FILE
networks:
  dst_network:
    name: ${PROJECT_NETWORK_1}
    driver: bridge
